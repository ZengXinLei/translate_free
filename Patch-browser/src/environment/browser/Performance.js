Performance = function Performance (){};
environment.safefunction(Performance);
environment.rename(Performance);

Object.defineProperty(Performance.prototype,"timeOrigin",{value: 1686827277566.4,writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"onresourcetimingbufferfull",{value: null,writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"clearMarks",{value: function clearMarks(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"clearMeasures",{value: function clearMeasures(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"clearResourceTimings",{value: function clearResourceTimings(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"getEntries",{value: function getEntries(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"getEntriesByName",{value: function getEntriesByName(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"getEntriesByType",{value: function getEntriesByType(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"mark",{value: function mark(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"measure",{value: function measure(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"now",{value: function now(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"setResourceTimingBufferSize",{value: function setResourceTimingBufferSize(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"toJSON",{value: function toJSON(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"timing",{value: {},writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"navigation",{value: {},writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"memory",{value: {},writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"eventCounts",{value: {},writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Performance.prototype,"Symbol.toStringTag",{value: "Performance",writable:false,enumerable:false,configurable:true});

environment.safefunction(Performance.prototype.clearMarks);
environment.rename(Performance.prototype.clearMarks,"clearMarks");
environment.safefunction(Performance.prototype.clearMeasures);
environment.rename(Performance.prototype.clearMeasures,"clearMeasures");
environment.safefunction(Performance.prototype.clearResourceTimings);
environment.rename(Performance.prototype.clearResourceTimings,"clearResourceTimings");
environment.safefunction(Performance.prototype.getEntries);
environment.rename(Performance.prototype.getEntries,"getEntries");
environment.safefunction(Performance.prototype.getEntriesByName);
environment.rename(Performance.prototype.getEntriesByName,"getEntriesByName");
environment.safefunction(Performance.prototype.getEntriesByType);
environment.rename(Performance.prototype.getEntriesByType,"getEntriesByType");
environment.safefunction(Performance.prototype.mark);
environment.rename(Performance.prototype.mark,"mark");
environment.safefunction(Performance.prototype.measure);
environment.rename(Performance.prototype.measure,"measure");
environment.safefunction(Performance.prototype.now);
environment.rename(Performance.prototype.now,"now");
environment.safefunction(Performance.prototype.setResourceTimingBufferSize);
environment.rename(Performance.prototype.setResourceTimingBufferSize,"setResourceTimingBufferSize");
environment.safefunction(Performance.prototype.toJSON);
environment.rename(Performance.prototype.toJSON,"toJSON");
