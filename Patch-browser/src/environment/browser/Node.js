Node = function Node (){environment.error()};
environment.safefunction(Node);
environment.rename(Node);

Object.defineProperty(Node.prototype,"nodeType",{value: 9,writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"nodeName",{value: `#document`,writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"baseURI",{value: `chrome://newtab/`,writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"isConnected",{value: true,writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"ownerDocument",{value: null,writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"parentNode",{value: null,writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"parentElement",{value: null,writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"childNodes",{value: {},writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"firstChild",{value: {},writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"lastChild",{value: {},writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"previousSibling",{value: null,writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"nextSibling",{value: null,writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"nodeValue",{value: null,writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"textContent",{value: null,writable:undefined,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"ELEMENT_NODE",{value: 1,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"ATTRIBUTE_NODE",{value: 2,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"TEXT_NODE",{value: 3,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"CDATA_SECTION_NODE",{value: 4,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"ENTITY_REFERENCE_NODE",{value: 5,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"ENTITY_NODE",{value: 6,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"PROCESSING_INSTRUCTION_NODE",{value: 7,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"COMMENT_NODE",{value: 8,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"DOCUMENT_NODE",{value: 9,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"DOCUMENT_TYPE_NODE",{value: 10,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"DOCUMENT_FRAGMENT_NODE",{value: 11,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"NOTATION_NODE",{value: 12,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"DOCUMENT_POSITION_DISCONNECTED",{value: 1,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"DOCUMENT_POSITION_PRECEDING",{value: 2,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"DOCUMENT_POSITION_FOLLOWING",{value: 4,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"DOCUMENT_POSITION_CONTAINS",{value: 8,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"DOCUMENT_POSITION_CONTAINED_BY",{value: 16,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",{value: 32,writable:false,enumerable:true,configurable:false});
Object.defineProperty(Node.prototype,"appendChild",{value: function appendChild(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"cloneNode",{value: function cloneNode(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"compareDocumentPosition",{value: function compareDocumentPosition(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"contains",{value: function contains(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"getRootNode",{value: function getRootNode(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"hasChildNodes",{value: function hasChildNodes(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"insertBefore",{value: function insertBefore(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"isDefaultNamespace",{value: function isDefaultNamespace(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"isEqualNode",{value: function isEqualNode(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"isSameNode",{value: function isSameNode(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"lookupNamespaceURI",{value: function lookupNamespaceURI(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"lookupPrefix",{value: function lookupPrefix(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"normalize",{value: function normalize(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"removeChild",{value: function removeChild(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"replaceChild",{value: function replaceChild(){debugger;},writable:true,enumerable:true,configurable:true});
Object.defineProperty(Node.prototype,"Symbol.toStringTag",{value: "Node",writable:false,enumerable:false,configurable:true});

environment.safefunction(Node.prototype.appendChild);
environment.rename(Node.prototype.appendChild,"appendChild");
environment.safefunction(Node.prototype.cloneNode);
environment.rename(Node.prototype.cloneNode,"cloneNode");
environment.safefunction(Node.prototype.compareDocumentPosition);
environment.rename(Node.prototype.compareDocumentPosition,"compareDocumentPosition");
environment.safefunction(Node.prototype.contains);
environment.rename(Node.prototype.contains,"contains");
environment.safefunction(Node.prototype.getRootNode);
environment.rename(Node.prototype.getRootNode,"getRootNode");
environment.safefunction(Node.prototype.hasChildNodes);
environment.rename(Node.prototype.hasChildNodes,"hasChildNodes");
environment.safefunction(Node.prototype.insertBefore);
environment.rename(Node.prototype.insertBefore,"insertBefore");
environment.safefunction(Node.prototype.isDefaultNamespace);
environment.rename(Node.prototype.isDefaultNamespace,"isDefaultNamespace");
environment.safefunction(Node.prototype.isEqualNode);
environment.rename(Node.prototype.isEqualNode,"isEqualNode");
environment.safefunction(Node.prototype.isSameNode);
environment.rename(Node.prototype.isSameNode,"isSameNode");
environment.safefunction(Node.prototype.lookupNamespaceURI);
environment.rename(Node.prototype.lookupNamespaceURI,"lookupNamespaceURI");
environment.safefunction(Node.prototype.lookupPrefix);
environment.rename(Node.prototype.lookupPrefix,"lookupPrefix");
environment.safefunction(Node.prototype.normalize);
environment.rename(Node.prototype.normalize,"normalize");
environment.safefunction(Node.prototype.removeChild);
environment.rename(Node.prototype.removeChild,"removeChild");
environment.safefunction(Node.prototype.replaceChild);
environment.rename(Node.prototype.replaceChild,"replaceChild");
Object.setPrototypeOf(Node.prototype, EventTarget.prototype);
